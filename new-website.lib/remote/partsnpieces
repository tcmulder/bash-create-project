#!/bin/sh

# make block style big_echoing easier
function big_echo(){
	echo
	echo "------------------------------"
	echo "//// $1"
	echo "------------------------------"
	echo
}
function med_echo(){
	echo
	echo "$1"
	echo
}
function make_dirs(){
	if [ ! -d $1 ]; then
		mkdir $1
		echo "Created directory "$1
		cd $1
	elif [ -d $1 ]; then
		echo "Using existing client directory"
		cd $1
	else
		echo "Unable to create or cd into directory. Exiting."
		cd $git_dir
		exit
	fi

	if [ ! -d $2 ]; then
		mkdir $2
		echo "Created directory "$2
		cd $2
		git init
		echo "deny from all" > .git/.htaccess
		if [ ! -d ../archive/ ]; then
			mkdir ../archive/
		fi
		if [ ! -f ../index.php ]; then
			cp /var/www/vhosts/new-zenmanblog.com/zen_dev1/sites/client_template/* ../
		fi
	elif [ -d $2 ]; then
		echo "The project directory exists. Exiting."
		cd $git_dir
		exit
	else
		echo "Unable to create or cd into directory. Exiting."
		cd $git_dir
		exit
	fi

	cd $git_dir
}
function make_bare_hooks(){
	touch $bare_dir"/hooks/update-branch/update-"$1

	echo "#!/bin/sh

	echo
	echo '------------------------------'
	echo '//// Updating $1'
	echo '------------------------------'
	echo

	cd /var/www/vhosts/new-zenmanblog.com/zen_"$1"1/sites/$the_client/$the_proj || exit
	unset GIT_DIR
	git pull hub $1

	exec git-update-server-info" > $bare_dir"/hooks/update-branch/update-$1"

	chmod +x $bare_dir"/hooks/update-branch/update-"$1
}
function make_work_config(){
	echo "[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote \"hub\"]
	url = $bare_dir
	fetch = +refs/heads/*:refs/remotes/hub/*" > $1".git/config"
}
function make_work_hooks(){
	rm $1".git/hooks/"*".sample"
	echo "#!/bin/sh

echo
echo '**** Updating Database'
echo

if [ -f .db/$3_db.sql ]; then
	mysqldump -hlocalhost -u$2$the_db_user -p$the_db_pass --no-data $2$the_db | grep ^DROP > .db/drop.sql
	mysql -hlocalhost -u$2$the_db_user -p$the_db_pass $2$the_db < .db/drop.sql
	mysql -hlocalhost -u$2$the_db_user -p$the_db_pass $2$the_db < .db/$3_db.sql
	rm .db/drop.sql
else
	echo 'No database update found'
fi" > $1".git/hooks/post-merge"

	chmod +x $1".git/hooks/post-merge"

}
function make_db(){

	MYSQL=`which mysql`

	Q1="CREATE DATABASE IF NOT EXISTS d1_$the_db;"
	Q2="GRANT USAGE ON *.* TO d1_$the_db_user@localhost IDENTIFIED BY '$the_db_pass';"
	Q3="GRANT ALL PRIVILEGES ON d1_$the_db.* TO d1_$the_db_user@localhost;"
	Q4="FLUSH PRIVILEGES;"

	Q5="CREATE DATABASE IF NOT EXISTS t1_$the_db;"
	Q6="GRANT USAGE ON *.* TO t1_$the_db_user@localhost IDENTIFIED BY '$the_db_pass';"
	Q7="GRANT ALL PRIVILEGES ON t1_$the_db.* TO t1_$the_db_user@localhost;"
	Q8="FLUSH PRIVILEGES;"

	Q9="CREATE DATABASE IF NOT EXISTS s1_$the_db;"
	Q10="GRANT USAGE ON *.* TO s1_$the_db_user@localhost IDENTIFIED BY '$the_db_pass';"
	Q11="GRANT ALL PRIVILEGES ON s1_$the_db.* TO s1_$the_db_user@localhost;"
	Q12="FLUSH PRIVILEGES;"

	SQL="${Q1}${Q2}${Q3}${Q4}${Q5}${Q6}${Q7}${Q8}${Q9}${Q10}${Q11}${Q12}"

	$MYSQL -uadmin -p -e "$SQL"

	echo "I've created the databases d1_$the_db with user d1_$the_db_user and password $the_db_pass"
	echo "I've created the databases t1_$the_db with user t1_$the_db_user and password $the_db_pass"
	echo "I've created the databases s1_$the_db with user s1_$the_db_user and password $the_db_pass"
}

big_echo "Building Remote Zenpository"

med_echo "Let's start off by getting some information."

read -p "What's the client's name? " the_client
read -p "What's the project's name? " the_proj
read -p "What's the unprefixed database name? " the_db
read -p "What's the unprefixed database user? " the_db_user
read -p "What's the database's password? " the_db_pass


med_echo "So, here's what you're telling me:"

echo "the client is: "$the_client
echo "the project is: "$the_proj
echo "the database is: "$the_db
echo "the database user is: "$the_db_user
echo "the database password is is: "$the_db_pass

#store the directories
git_dir=`pwd`
bare_dir=$git_dir"/"$the_proj.git
echo "the bare repository is: "$git_dir
dev_dir="/var/www/vhosts/new-zenmanblog.com/zen_dev1/sites/"
dev_client=$dev_dir""$the_client"/"
dev_proj=$dev_client""$the_proj"/"
echo "dev project directory is: "$dev_proj
test_dir="/var/www/vhosts/new-zenmanblog.com/zen_test1/sites/"
test_client=$test_dir""$the_client"/"
test_proj=$test_client""$the_proj"/"
echo "test project directory is: "$test_proj
stage_dir="/var/www/vhosts/new-zenmanblog.com/zen_stage1/sites/"
stage_client=$stage_dir""$the_client"/"
stage_proj=$stage_client""$the_proj"/"
echo "stage project directory is is: "$stage_proj

# big_echo "Bare Repository"

med_echo "Now we'll create the bare repository."
if [ ! -d $the_proj".git" ]; then
	mkdir $the_proj".git"
	echo "Created "$the_proj".git directory"
	cd $the_proj".git"
	git init --bare
	cd -
elif [ -d $the_proj".git" ]; then
	echo "The project directory exists. Exiting."
	exit
else
	echo "Unable to create or cd into directory. Exiting."
	exit
fi

med_echo "And now, let's set up some hooks."

rm $bare_dir"/hooks/"*".sample"

# this one is like the controller after a merge
echo "#!/bin/sh

echo
echo 'Running hub post-update hook'
echo

bash hooks/update-branch/update-dev
bash hooks/update-branch/update-test
bash hooks/update-branch/update-stage" > $bare_dir"/hooks/post-update"

chmod +x $bare_dir"/hooks/post-update"

echo "Created hook for post-update"

mkdir $bare_dir"/hooks/update-branch/"

make_bare_hooks "dev"
echo "Created hooks for dev"
make_bare_hooks "test"
echo "Created hooks for test"
make_bare_hooks "stage"
echo "Created hooks for stage"

big_echo "Creating Working Directories"

med_echo "Next we'll set up the working directories."

make_dirs $dev_client $dev_proj
echo "Created dev instance"
make_dirs $test_client $test_proj
echo "Created test instance"
make_dirs $stage_client $stage_proj
echo "Created stage instance"

med_echo "Let's set up the git config files."
make_work_config $dev_proj
echo "config edited for dev"
make_work_config $test_proj
echo "config edited for test"
make_work_config $stage_proj
echo "config edited for stage"

med_echo "Lastly, let's set up some hooks."
make_work_hooks $dev_proj "d1_" "dev"
echo "dev hooks created"
make_work_hooks $test_proj "t1_" "test"
echo "test hooks created"
make_work_hooks $stage_proj "s1_" "stage"
echo "stage hooks created"

read -p "Do you want to create a database for this project? (y/n) " db_confirm
if [ $db_confirm == "y" ]; then

	make_db

else
	echo "Great, then we're done."
fi

cd $git_dir

big_echo "Remote Zenpository Script Completed"

exit